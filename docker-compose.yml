version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - kafka-net

  kafdrop:
    image: obsidiandynamics/kafdrop:3.31.0
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    depends_on:
      - kafka
    networks:
      - kafka-net

  db:
    image: postgres:14.1
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sales
    ports:
      - "5431:5432"

    networks:
      - kafka-net

  producer:
    build:
      context: ./producer
    container_name: producer
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SALES_FILE_ARCHIVE: /data/archived-sale-files
      SALES_FILE_PATH: /data/sale-files
    volumes:
      - ./data:/data
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - kafka-net

  consumer:
    build:
      context: ./consumer
    container_name: consumer
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/sales
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8081:8081"
    depends_on:
      - kafka
      - db
    networks:
      - kafka-net

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    environment:
      REACT_APP_PRODUCER_ENDPOINT: producer:8081
    depends_on:
      - consumer
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge
